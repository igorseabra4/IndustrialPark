using IndustrialParkRandomizer.Helpers;
using Newtonsoft.Json;
using System;
using System.IO;
using System.Threading;
using System.Windows.Forms;

namespace IndustrialPark.Randomizer
{
    public partial class RandomizerMenu : Form
    {
        private Randomizer randomizer;
        private string pathToSettings => Application.StartupPath + "/randomizer_settings.json";
        private string heavyModManagerPath;

        public RandomizerMenu()
        {
            InitializeComponent();

            if (File.Exists(pathToSettings))
            {
                Randomizer_JSON_Settings settings = JsonConvert.DeserializeObject<Randomizer_JSON_Settings>(File.ReadAllText(pathToSettings));
                heavyModManagerPath = settings.heavyModManagerPath;
                checkForUpdatesOnStartupToolStripMenuItem.Checked = settings.checkForUpdatesOnStartup;

                if (settings.checkForUpdatesOnStartup && AutomaticUpdater.UpdateIndustrialPark(out _))
                {
                    Close();
                    System.Diagnostics.Process.Start(Application.StartupPath + "/Randomizer.exe");
                }
            }
            else
            {
                MessageBox.Show("It appears this is your first time using Industrial Park's Randomizer.\nPlease consult the documentation on the Heavy Iron Modding Wiki to understand how to use the tool if you haven't already.");

                checkForUpdatesOnStartupToolStripMenuItem.Checked = true;

                File.WriteAllText(pathToSettings, JsonConvert.SerializeObject(new Randomizer_JSON_Settings(), Formatting.Indented));
            }

            randomizer = new Randomizer(0);
            randomizer.RandomSeed();
            UpdateInterfaceFromRandomizer();
        }

        private void RandomizerMenu_FormClosing(object sender, FormClosingEventArgs e)
        {
            File.WriteAllText(pathToSettings, JsonConvert.SerializeObject(new Randomizer_JSON_Settings
            {
                checkForUpdatesOnStartup = checkForUpdatesOnStartupToolStripMenuItem.Checked,
                heavyModManagerPath = heavyModManagerPath
            }, Formatting.Indented));
        }

        private void setHeavyModManagerPathToolStripMenuItem_Click(object sender, EventArgs e)
        {
            var openFile = new OpenFileDialog()
            {
                Filter = "HeavyModManager.exe|HeavyModManager.exe"
            };

            if (openFile.ShowDialog() == DialogResult.OK)
            {
                heavyModManagerPath = openFile.FileName;
                UpdateInterfaceFromRandomizer();
            }
        }

        private void ButtonRandomSeed_Click(object sender, EventArgs e)
        {
            randomizer.RandomSeed();
            UpdateInterfaceFromRandomizer();
        }

        private void TextBox1_TextChanged(object sender, EventArgs e)
        {
            if (!programIsChangingStuff)
            {
                randomizer.SetSeed(textBoxSeed.Text);
                UpdateInterfaceFromRandomizer();
            }
        }

        private void buttonPerform_Click(object sender, EventArgs e)
        {
            var mod = new Mod();
            string gameFolderName;

            switch (randomizer.game)
            {
                case 0:
                    gameFolderName = "bfbb";
                    mod.Game = HMM_Game.BFBB;
                    break;
                case 1:
                    gameFolderName = "scooby";
                    mod.Game = HMM_Game.Scooby;
                    break;
                case 2:
                    gameFolderName = "movie";
                    mod.Game = HMM_Game.Movie;
                    break;
                default:
                    throw new Exception();
            }

            var hmmDir = Path.GetDirectoryName(heavyModManagerPath);
            var backupDir = Path.Combine(hmmDir, "Games", "gc", gameFolderName, "backup", "files");

            if (!Directory.Exists(backupDir))
            {
                MessageBox.Show("Game backup not found. Please create a backup for this game in Heavy Mod Manager before randomizing it.");
                return;
            }

            mod.CreatedAt = DateTime.Now;
            mod.UpdatedAt = mod.CreatedAt;
            mod.ModName = $"Randomized Game {mod.CreatedAt.Year:D4}-{mod.CreatedAt.Month:D2}-{mod.CreatedAt.Day:D2} {mod.CreatedAt.Hour:D2}:{mod.CreatedAt.Minute:D2}:{mod.CreatedAt.Second:D2} [{randomizer.seed}]";
            mod.Author = "Industrial Park Randomizer";
            mod.Description = "This is a randomized game generated by Industrial Park's randomizer. You can find the settings file inside the mod's files folder.";
            mod.ModId = $"{gameFolderName}-randomizer-{randomizer.seed}-{(uint)randomizer.settings.GetHashCode()}";

            if (randomizer.settings.skipSpatulaAnims)
                mod.ArCodes += "$skip spatula anims\n040634F8 60000000\n0406363C 60000000\n04076A38 60000000\n04076A4C 60000000\n040640A0 60000000";

            if (randomizer.settings.widescreen)
                mod.GeckoCodes += "$16x9 aspect\n043d07e0 3f400000\n043d07e4 3f800000\n043d07e8 3f800000\n043d07f0 80134030\n043d07f8 41000000\nc2134024 00000003\n3c808032 38600003\n38844258 38a00006\n60000000 00000000\n04134028 48000005\nc213402c 00000002\n7e2802a6 3a310008\n7e2803a6 00000000\nc2134030 00000013\nc222be60 c262be64\nfe409890 ee529024\nfc119800 41800010\nee319824 ee528824\nfe209890 c262be68\nee3104f2 ee5204f2\n8a22be6c 2c110001\n40820020 8a22be74\n2c110001 41820014\nee318824 ee529024\n3a200000 9a22be6c\n8a22be74 2c110001\n4182002c 3e20802b\nd2317dd0 fe208850\nd2317dbc d2517dc4\nc262bddc ee73982a\nee5204f2 fe409050\nd242bdb4 4e800020\n60000000 00000000\nc213403c 00000004\n3a200001 9a22be6c\n8222be70 7e2903a6\n4e800421 e3e10058\n60000000 00000000\nc20209ac 00000002\n3883e178 38600003\n60000000 00000000\n040209b0 48113681\nc20209b8 00000004\n7c000278 3a200001\n9a22be6c 8222be70\n7e2903a6 4e800421\n60000000 00000000\nc2020a84 00000002\n3884e178 38a00078\n60000000 00000000\n04020a88 481135a9\nc2020a90 00000004\n7c000278 3a200001\n9a22be6c 8222be70\n7e2903a6 4e800421\n60000000 00000000\nc20bab60 00000002\n38600003 38e00006\n60000000 00000000\n040bab64 480794cd\nc20bacfc 00000004\n3a200001 9a22be6c\n8222be70 7e2903a6\n4e800421 e3e100f8\n60000000 00000000\nc20c3ca4 00000002\nc0c29710 3a200001\n9a22be74 00000000\nc21d0ab4 00000008\ned090024 8a22be74\n2c110001 4082002c\nc222be60 fe404890\nfc114800 4180000c\nfe408890 fe204890\ned089024 ed4a0472\n3a200000 9a22be74\n60000000 00000000\nc2245d4c 00000007\n3a200001 9a22be74\n8222be70 7e2903a6\n4e800421 3a200000\n9a22be74 ec0004b2\nd003000c c0030004\nec000472 d0030004\n60000000 00000000\n042363f0 c082be78\n0423642c c022be78\nc209913c 00000003\nd0a10068 8222be70\n7e2903a6 4e800421\n60000000 00000000\nc2099168 00000004\n3c608026 3a200001\n9a22be6c 8222be70\n7e2903a6 4e800421\n60000000 00000000\n043cd04c 00000000";

            var modDir = Path.Combine(hmmDir, "Mods", mod.ModId);
            var destinationDir = Path.Combine(modDir, "files");

            ProgressBar progressBar = new ProgressBar("Randomizing...");
            progressBar.Show();

            Enabled = false;
            new Thread(new ThreadStart(() =>
            {
                randomizer.Perform(backupDir, destinationDir, progressBar);

                mod.RemoveFiles = randomizer.RemoveFiles;
                mod.INIReplacements = randomizer.INI;

                if (!Directory.Exists(destinationDir))
                    Directory.CreateDirectory(destinationDir);

                File.WriteAllText(Path.Combine(modDir, "mod.json"), JsonConvert.SerializeObject(mod));

                ThreadDone(progressBar);
            })).Start();
        }

        private void ThreadDone(ProgressBar progressBar)
        {
            Invoke(new Action(() =>
            {
                progressBar.Close();
                Enabled = true;
                UpdateInterfaceFromRandomizer();
            }));
        }

        private void ButtonHelp_Click(object sender, EventArgs e)
        {
            System.Diagnostics.Process.Start("https://www.heavyironmodding.org/wiki/Randomizer");
        }

        private void buttonReset_Click(object sender, EventArgs e)
        {
            randomizer = new Randomizer(comboBoxGame.SelectedIndex);
            randomizer.SetSeed(textBoxSeed.Text);
            UpdateInterfaceFromRandomizer();
        }

        private void ButtonClear_Click(object sender, EventArgs e)
        {
            randomizer.settings.SetAllFalse();
            UpdateInterfaceFromRandomizer();
        }

        private void SaveToolStripMenuItem_Click(object sender, EventArgs e)
        {
            using (SaveFileDialog saveFile = new SaveFileDialog()
            {
                Filter = "JSON Files|*.json|All files|*.*"
            })
                if (saveFile.ShowDialog() == DialogResult.OK)
                    File.WriteAllText(saveFile.FileName, JsonConvert.SerializeObject(randomizer, Formatting.Indented));
        }

        private void LoadToolStripMenuItem_Click(object sender, EventArgs e)
        {
            using (OpenFileDialog openFile = new OpenFileDialog()
            {
                Filter = "JSON Files|*.json|All files|*.*"
            })
                if (openFile.ShowDialog() == DialogResult.OK)
                {
                    Randomizer settings = JsonConvert.DeserializeObject<Randomizer>(File.ReadAllText(openFile.FileName));

                    if (settings.version == Randomizer.currVersion)
                        randomizer = settings;
                    else
                        MessageBox.Show("Randomizer settings file was made with a different version of Industrial Park and cannot be opened.");

                    UpdateInterfaceFromRandomizer();
                }
        }

        private bool programIsChangingStuff = false;

        private void UpdateInterfaceFromRandomizer()
        {
            if (InvokeRequired)
            {
                Invoke(new Action(UpdateInterfaceFromRandomizer));
                return;
            }
            programIsChangingStuff = true;

            comboBoxGame.SelectedIndex = randomizer.game;

            if (!string.IsNullOrEmpty(heavyModManagerPath) && File.Exists(heavyModManagerPath))
            {
                labelHmmPath.Text = "Heavy Mod Manager path: " + Path.GetDirectoryName(heavyModManagerPath);
                buttonPerform.Enabled = true;
            }
            else
            {
                labelHmmPath.Text = "Heavy Mod Manager path not set";
                buttonPerform.Enabled = false;
            }

            textBoxSeed.Text = randomizer.seedText;
            labelSeed.Text = "Seed: " + randomizer.seed.ToString();

            DynamicTypeDescriptor dt = new DynamicTypeDescriptor(randomizer.settings.GetType());
            randomizer.settings.SetDynamicProperties(dt, comboBoxGame.SelectedIndex);
            propertyGridSettings.SelectedObject = dt.FromComponent(randomizer.settings);

            programIsChangingStuff = false;
        }

        private void CheckForUpdatesOnStartupToolStripMenuItem_Click(object sender, EventArgs e)
        {
            checkForUpdatesOnStartupToolStripMenuItem.Checked = !checkForUpdatesOnStartupToolStripMenuItem.Checked;
        }

        private void propertyGridAsset_SelectedGridItemChanged(object sender, SelectedGridItemChangedEventArgs e)
        {
            richTextBoxHelp.Text = e.NewSelection.PropertyDescriptor == null ? "" : e.NewSelection.PropertyDescriptor.Description;
        }

        private void comboBoxGame_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!programIsChangingStuff)
            {
                randomizer.game = comboBoxGame.SelectedIndex;
                randomizer.settings.ChangeForGame(randomizer.game);
                UpdateInterfaceFromRandomizer();
            }
        }

        private void checkForUpdatesOnEditorFilesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (!AutomaticUpdater.VerifyEditorFiles())
                MessageBox.Show("No update found.");
        }
    }
}
